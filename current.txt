const { EventEmitter, errorMonitor } = require('events');

class BankingSystem extends EventEmitter {
    accounts;
    constructor() {
        super();
        this.accounts = {}
    }

    createAccount(accountNumber) {
        if (this.accounts[accountNumber]) {
            throw new Error('Account already exists.')
        }
        this.accounts[accountNumber] = { balance: 0 };
        this.emit('accountCreated', `Account ${accountNumber} created.`);
        return 'Account created successfully.'
    }

    deposit(accountNumber, amount) {
        this.#_validateAccount(accountNumber);
        if (amount <= 0) {
            throw new Error('Deposit amount must be positive.');
        }
        this.accounts[accountNumber].balance += amount;
        this.emit('moneyDeposited', `Deposited ${amount} into account ${accountNumber}`);
        return `Deposited ${amount} successfully.`
    }

    withdraw(accountNumber, amount) {
        this.#_validateAccount(accountNumber);
        if (amount <= 0) {
            throw new Error('Withdrawal amount must be positive.');
        }
        if (this.accounts[accountNumber].balance < amount) {
            throw new Error('Insufficient funds.')
        }
        this.accounts[accountNumber].balance -= amount;
        this.emit('moneyWithdrawn', `Withdrew ${amount} from account ${accountNumber}`);
        return `Withdrew ${amount} successfully.`
    }

    getBalance(accountNumber) {
        this.#_validateAccount(accountNumber);
        return `Balance: ${this.accounts[accountNumber].balance}`;
    }

    #_validateAccount(accountNumber) {
        if (!this.accounts[accountNumber]) {
            throw new Error('Account does not exist.')
        }
    }
}

module.exports = BankingSystem;