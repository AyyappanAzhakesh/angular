KanbanBoard.ts

import { Component, OnInit } from '@angular/core';
import { TaskService } from '../services/task.service';

@Component({
  selector: 'app-kanban-board',
  templateUrl: './kanban-board.component.html',
  styleUrls: ['./kanban-board.component.css']
})
export class KanbanBoardComponent implements OnInit {
  tasks:any[]=[];

  constructor(private taskService: TaskService) { }

  ngOnInit(): void {
    this.taskService.getTasks().subscribe((data)=>{
      this.tasks = data;
    });
  }
  getTasksForStage(stage:string){
    return this.tasks.filter(task => task.status === stage);
  }

}

Login.ts
import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { UserService } from '../services/user.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {

  username:string = '';
  password:string = '';
  errorMessage:string = '';
  constructor(private router:Router, private userService: UserService) { }

  ngOnInit(): void {
  }

  login(form?:NgForm):void{
    if(!this.username || !this.password){
      this.errorMessage = 'Username and Password are required';
      return;
    }
    this.userService.verifyLogin(this.username, this.password).subscribe({
      next : (user) => {
        this.errorMessage ='';
        this.router.navigate(['/kanban']);
      },
      error : (err) => {
        this.errorMessage = 'Invalid username or password';
      }
    })
  }
  goToRegister(){
    this.router.navigate(['/register']);
  }
}

Login.html
<div class="container">
    <form #logForm="ngForm" (ngSubmit)="login(logForm)">
        <div>
            <h2>Login</h2>
        </div>
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" name="username" id="username" class="form-control" #usernameRef="ngModel" [(ngModel)]="username" required/>
            <div class="errorMessage" *ngIf="usernameRef?.touched && usernameRef?.invalid">
                <small *ngIf="usernameRef.errors?.required">Username is required</small>
            </div>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" name="password" id="password" class="form-control" #passwordRef="ngModel" [(ngModel)]="password" required/>
            <div class="errorMessage" *ngIf="passwordRef?.touched && passwordRef?.invalid">
                <small *ngIf="passwordRef.errors?.required">Password is required</small>
            </div>
        </div>
        <div *ngIf="errorMessage">{{errorMessage}}</div>
        <button class="log-btn" type="submit" [disabled]="logForm.invalid">Login</button>
        <button class="btn" (click)="goToRegister()">Register</button>
    </form>
</div>

task.model
export interface Task {
    id:number,
    title:string,
    description:string,
    status:string,
    deadline?:Date
}

user.model
export interface User {
    id?:number,
    username?:string,
    password?:string,
    role?:string,
    fullName?:string,
    position?:string,
    department?:string,
    phoneNumber?:string,
}

register.html
<div class="container">
    <form #regForm="ngForm" (ngSubmit)="register(regForm)">
        <div>
            <h2>User Registration</h2>
        </div>
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" name="username" id="username" class="form-control" #username="ngModel" [(ngModel)]="formData.username" required>
            <div class="error-message" *ngIf="username?.touched && username?.invalid">
                <small *ngIf="username.errors?.required">Username is required</small>
            </div>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" name="password" id="password" class="form-control" #password="ngModel" [(ngModel)]="formData.password" required>
            <div class="error-message" *ngIf="password?.touched && password?.invalid">
                <small *ngIf="password.errors?.required">Password is required</small>
            </div>
        </div>
        <div class="form-group">
            <label for="role">Role:</label>
            <select class="form-control" name="role" id="role" [(ngModel)]="formData.role">
                <option value="User">User</option>
                <option value="Admin">Admin</option>
            </select>
        </div>
        <div class="form-group">
            <label for="fullName">Full Name:</label>
            <input type="text" name="fullName" id="fullName" class="form-control" #fullName="ngModel" [(ngModel)]="formData.fullName" required>
            <div class="error-message" *ngIf="fullName?.touched && fullName?.invalid">
                <small *ngIf="fullName.errors?.required">Full Name is required</small>
            </div>
        </div>
        <div class="form-group">
            <label for="position">Position:</label>
            <input type="text" name="position" id="position" class="form-control" #position="ngModel" [(ngModel)]="formData.position" required>
            <div class="error-message" *ngIf="position?.touched && position?.invalid">
                <small *ngIf="position.errors?.required">Position is required</small>
            </div>
        </div>
        <div class="form-group">
            <label for="department">Department:</label>
            <input type="text" name="department" id="department" class="form-control" #department="ngModel" [(ngModel)]="formData.department" required>
            <div class="error-message" *ngIf="department?.touched && department?.invalid">
                <small *ngIf="department.errors?.required">Department is required</small>
            </div>
        </div>
        <div class="form-group">
            <label for="phone">Phone Number:</label>
            <input type="tel" name="phoneNumber" id="phoneNumber" class="form-control" #phoneNumber="ngModel" [(ngModel)]="formData.phoneNumber" required>
            <div class="error-message" *ngIf="phoneNumber?.touched && phoneNumber?.invalid">
                <small *ngIf="phoneNumber.errors?.required">Phone Number is required</small>
            </div>
        </div>
        <button class="btn" type="submit" [disabled]="regForm.invalid">Register</button>
        <div>
            <small>Already have an account? <a routerLink="/login">Login</a></small>
        </div>
    </form>
</div>

register.ts
import { Component, OnInit } from '@angular/core';
import { User } from '../models/user.model';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent implements OnInit {

  formData:User = {
    username:'',
    password:'',
    role:'',
    fullName:'',
    position:'',
    department:'',
    phoneNumber:''
  }

  constructor() { }

  ngOnInit(): void {
  }

  register(regForm:NgForm){
    console.log(regForm);
  }
}

register.css
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    overflow: hidden;
}
.error-message{
    color: red;
    text-align: center;
}
.container{
    width: 100%;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    overflow: hidden;
}
form{
    width: 300px;
    height: 500px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgb(239, 239, 239);
    border-radius: 5px;
    /* overflow: hidden; */
    padding: 3px;
}
h2{
    margin-bottom: 20px;
}
.form-group{
    /* overflow:hidden; */
    width: 100%;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 5px;
    /* gap: 10px; */
}
.form-control{
    width: 100%;
    padding: 2px;
}
a{
    text-decoration: none;
}

.btn{
    width: 96%;
    padding: 5px;
    background-color: rgb(19, 126, 220);
    color: white;
    border-radius: 2px;
    border: none;
}

task.service
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Task } from '../models/task.model';

@Injectable({
  providedIn: 'root'
})
export class TaskService {

  apiUrl:string = 'https://eecfffff330231976fccecdebedaone.project.examly.io/proxy/3001/tasks'

  constructor(private http:HttpClient) { }

  getTasks():Observable<Task[]>{
    return this.http.get<Task[]>(this.apiUrl);
  }

  getTask(id):Observable<Task>{
    return this.http.get<Task>(`${this.apiUrl}/${id}`);
  }

  addTask(newTask):Observable<Task>{
    return this.http.post<Task>(this.apiUrl, newTask);
  }

  updateTaskStatus(id:number, status:string):Observable<Task>{
    return this.http.patch<Task>(`${this.apiUrl}/${id}`, {status});
  }

  updateTask(updatedTask):Observable<Task>{
    return this.http.put<Task>(`${this.apiUrl}/${updatedTask.id}`, updatedTask);
  }

  deleteTask(id):Observable<void>{
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}

user.service
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { User } from '../models/user.model';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  apiUrl:string = 'https://eecfffff330231976fccecdebedaone.project.examly.io/proxy/3001/users';

  constructor(private http: HttpClient) { }

  getUserByUsername(username:User):Observable<User>{
    return this.http.get<User>(`${this.apiUrl}?username=${username}`);
  }

  getUserById(id):Observable<User>{
    return this.http.get<User>(`${this.apiUrl}/${id}`);
  }

  getAllUsers():Observable<User[]>{
    return this.http.get<User[]>(this.apiUrl);
  }

  verifyLogin(username,password):Observable<any>{
    return this.getAllUsers().pipe(map(users=>{
     const match = users.find(user=>user.username === username && user.password === password);
     if(match){
       localStorage.setItem('currentUser',JSON.stringify(match));
       return match;

     }
     else{
       throw new Error('Invalid username or password');
     }
   })
    );
 }
  
  deleteUser(id):Observable<void>{
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}

task-form.html
<div class="container">
    <form [formGroup]="taskForm" (ngSubmit)="onSubmit()">
        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" name="title" id="title" class="form-control" formControlName="title">
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <textarea name="description" id="description" cols="30" rows="10" class="form-control" formControlName="description"></textarea>
        </div>
        <div class="form-group">
            <label for="deadline">Deadline</label>
            <input type="date" name="deadline" id="deadline" class="form-control" formControlName="deadline">
        </div>
        <div class="form-group">
            <label for="status">Status</label>
            <select name="status" id="status" class="form-control">
                <option value="To Do">To Do</option>
                <option value="In Progress">In Progress</option>
            </select>
        </div>
        <button class="btn" type="submit">{{taskId? 'Update Task' : 'Add Task'}}</button>
    </form>
</div>

task-form.css
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container{
    width: 100%;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    overflow: hidden;
}
form{
    width: 600px;
    height: 450px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgb(239, 239, 239);
    border-radius: 5px;
    overflow: hidden;
    padding: 10px;
}

.form-group{
    overflow:hidden;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: start;
    padding: 10px;
    /* gap: 10px; */
}
.form-control{
    width: 100%;
    padding: 5px;
}

.btn{
    width: 96%;
    padding: 7px;
    background-color: rgb(19, 126, 220);
    color: white;
}


task-form.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Task } from '../models/task.model';
import { ActivatedRoute, Router } from '@angular/router';
import { TaskService } from '../services/task.service';

@Component({
  selector: 'app-task-form',
  templateUrl: './task-form.component.html',
  styleUrls: ['./task-form.component.css']
})
export class TaskFormComponent implements OnInit {

  tasks:Task[] = [];
  taskForm!:FormGroup;
  taskId:number | null = null;

  constructor(private formBuilder: FormBuilder, private route:ActivatedRoute, private router:Router, private taskService: TaskService) { }

  ngOnInit(): void {
    this.taskForm = this.formBuilder.group({
      title: ['', Validators.required],
      description:['', Validators.required],
      deadline:['', Validators.required],
      status:['To Do', Validators.required],
    });
    this.route.paramMap.subscribe(params => {
      const id = params.get('id');
      if(id){
        this.taskId = +id;
        this.taskService.getTask(this.taskId).subscribe(task => {
          this.taskForm.patchValue({
            title:task.title,
            description: task.description,
            deadline: new Date(task.deadline),
            status: task.status
          });
        });
      }
    });
  }
  onSubmit():void{
    if(this.taskForm.invalid) return;
      const formValue = {
        ...this.taskForm.value,
        deadline: this.taskForm.value.deadline ? new Date(this.taskForm.value.deadline) : null
      };
     if(this.taskId){
      const updatedTask:Task={
        ...formValue
      };
      this.taskService.updateTask(updatedTask).subscribe(() => {
        this.router.navigate(['/kanban']);
      });
     } else{
      this.taskService.addTask(formValue).subscribe(() => {
        this.router.navigate(['/kanban']);
      });
     }
    }

  }
app-routing.modules
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { RegisterComponent } from './register/register.component';
import { LoginComponent } from './login/login.component';
import { TaskFormComponent } from './task-form/task-form.component';
import { KanbanBoardComponent } from './kanban-board/kanban-board.component';

const routes: Routes = [
  {path:'register', component:RegisterComponent},
  {path:'login', component:LoginComponent},
  {path:'task-form', component: TaskFormComponent},
  {path: 'kanban', component: KanbanBoardComponent}
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

app.component.html
<router-outlet>
  
</router-outlet>

app.module.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { EmployeeDetailComponent } from './employee-detail/employee-detail.component';
import { EmployeeFormComponent } from './employee-form/employee-form.component';
import { EmployeeListComponent } from './employee-list/employee-list.component';
import { KanbanBoardComponent } from './kanban-board/kanban-board.component';
import { LoginComponent } from './login/login.component';
import { RegisterComponent } from './register/register.component';
import { TaskCardComponent } from './task-card/task-card.component';
import { TaskFormComponent } from './task-form/task-form.component';
import { UserProfileComponent } from './user-profile/user-profile.component';
import { FormsModule } from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent,
    EmployeeDetailComponent,
    EmployeeFormComponent,
    EmployeeListComponent,
    KanbanBoardComponent,
    LoginComponent,
    RegisterComponent,
    TaskCardComponent,
    TaskFormComponent,
    UserProfileComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

